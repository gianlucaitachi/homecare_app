
import 'dart:convert';
import 'dart:io';

import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as io;
import 'package:shelf_router/shelf_router.dart';
import 'package:postgres/postgres.dart';
import 'package:dargon2_flutter/dargon2_flutter.dart';
import 'package:dargon2_flutter/dargon2_interface.dart';
import 'package:dart_jsonwebtoken/dart_jsonwebtoken.dart';

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ gi·ªØ k·∫øt n·ªëi database, s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o trong main()
late PostgreSQLConnection dbConnection;

// Kh√≥a b√≠ m·∫≠t ƒë·ªÉ k√Ω JWT. Trong ·ª©ng d·ª•ng th·∫≠t, h√£y l∆∞u n√≥ an to√†n h∆°n!
const jwtSecret = 'your-super-secret-and-long-key-that-is-at-least-32-chars';

// H√†m tr·ª£ gi√∫p ƒë·ªÉ t·∫°o response JSON chu·∫©n
Response jsonResponse(int statusCode, Map<String, dynamic> body) => Response(
      statusCode,
      body: jsonEncode(body),
      headers: {'content-type': 'application/json'},
    );

// Middleware ƒë·ªÉ x√°c th·ª±c JWT
Middleware checkJwtMiddleware() {
  return (Handler innerHandler) {
    return (Request request) async {
      // B·ªè qua x√°c th·ª±c cho c√°c route ƒëƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p
      if (request.url.path.startsWith('auth/register') ||
          request.url.path.startsWith('auth/login')) {
        return innerHandler(request);
      }

      final authHeader = request.headers['Authorization'];
      if (authHeader == null || !authHeader.startsWith('Bearer ')) {
        return jsonResponse(401, {'error': 'Missing or invalid token'});
      }

      final token = authHeader.substring(7); // B·ªè "Bearer "
      try {
        final jwt = JWT.verify(token, SecretKey(jwtSecret));
        // G·∫Øn th√¥ng tin user v√†o request ƒë·ªÉ c√°c handler sau c√≥ th·ªÉ s·ª≠ d·ª•ng
        final updatedRequest = request.change(context: {'jwt': jwt.payload});
        return innerHandler(updatedRequest);
      } on JWTExpiredException {
        return jsonResponse(401, {'error': 'Token has expired'});
      } on JWTException catch (e) {
        return jsonResponse(401, {'error': 'Invalid token: ${e.message}'});
      }
    };
  };
}


void main() async {
  // === K·∫æT N·ªêI DATABASE ===
  // Thay ƒë·ªïi c√°c th√¥ng tin n√†y cho ph√π h·ª£p v·ªõi c·∫•u h√¨nh PostgreSQL c·ªßa b·∫°n
  dbConnection = PostgreSQLConnection(
    'localhost', // Host
    5432, // Port
    'homecare_db', // T√™n database
    username: 'postgres', // Username
    password: 'your_password', // M·∫≠t kh·∫©u c·ªßa b·∫°n
  );
  await dbConnection.open();
  print('‚úÖ Connected to PostgreSQL database');

  final app = Router();

  // === C√ÅC AUTH ENDPOINT V·ªöI DATABASE ===

  // [POST] /auth/register - ƒêƒÉng k√Ω v·ªõi m·∫≠t kh·∫©u ƒë∆∞·ª£c m√£ h√≥a
  app.post('/auth/register', (Request req) async {
    final payload = jsonDecode(await req.readAsString()) as Map<String, dynamic>;
    final email = payload['email'] as String?;
    final password = payload['password'] as String?;
    final name = payload['name'] as String?;

    if (email == null || password == null || name == null) {
      return jsonResponse(400, {'error': 'name, email, and password are required'});
    }

    // 1. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    final results = await dbConnection.query(
      'SELECT id FROM users WHERE email = @email LIMIT 1',
      substitutionValues: {'email': email},
    );

    if (results.isNotEmpty) {
      return jsonResponse(409, {'error': 'User with this email already exists'});
    }

    // 2. M√£ h√≥a m·∫≠t kh·∫©u
    DArgon2Flutter.init();
    final s = Salt.newSalt();
    final result = await dArgon2.hashPasswordString(password, salt: s);
    final passwordHash = result.encodedString;

    // 3. L∆∞u ng∆∞·ªùi d√πng m·ªõi v√†o database
    final insertResult = await dbConnection.query(
      'INSERT INTO users (name, email, password_hash) VALUES (@name, @email, @hash) RETURNING id, name, email',
      substitutionValues: {
        'name': name,
        'email': email,
        'hash': passwordHash,
      },
    );
    
    final newUser = insertResult.first.toColumnMap();
    print('‚úÖ New user registered: $newUser');

    return jsonResponse(201, {'user': newUser});
  });

  // [POST] /auth/login - ƒêƒÉng nh·∫≠p v√† t·∫°o JWT
  app.post('/auth/login', (Request req) async {
    final payload = jsonDecode(await req.readAsString()) as Map<String, dynamic>;
    final email = payload['email'] as String?;
    final password = payload['password'] as String?;

    if (email == null || password == null) {
      return jsonResponse(400, {'error': 'Email and password are required'});
    }
    
    // 1. T√¨m ng∆∞·ªùi d√πng
    final results = await dbConnection.query(
        'SELECT id, name, email, password_hash FROM users WHERE email = @email LIMIT 1',
        substitutionValues: {'email': email});

    if (results.isEmpty) {
        return jsonResponse(401, {'error': 'invalid_credentials'});
    }

    final userRow = results.first;
    final user = userRow.toColumnMap();
    final passwordHash = user['password_hash'] as String;

    // 2. X√°c th·ª±c m·∫≠t kh·∫©u
    DArgon2Flutter.init();
    final isPasswordValid = await dArgon2.verifyHashString(password, passwordHash);

    if (!isPasswordValid) {
        return jsonResponse(401, {'error': 'invalid_credentials'});
    }

    // 3. T·∫°o Access Token v√† Refresh Token
    final accessToken = JWT(
      {'userId': user['id'], 'name': user['name']},
      issuer: 'homecare_app',
      jwtId: 'access_${DateTime.now().millisecondsSinceEpoch}',
    ).sign(SecretKey(jwtSecret), expiresIn: Duration(minutes: 15));
    
    final refreshToken = JWT(
      {'userId': user['id']},
      issuer: 'homecare_app',
       jwtId: 'refresh_${DateTime.now().millisecondsSinceEpoch}',
    ).sign(SecretKey(jwtSecret), expiresIn: Duration(days: 7));


    print('‚úÖ User logged in: ${user['email']}');

    return jsonResponse(200, {
      'accessToken': accessToken,
      'refreshToken': refreshToken,
      'user': {'id': user['id'], 'name': user['name'], 'email': user['email']}
    });
  });

  // [GET] /auth/me - L·∫•y th√¥ng tin user t·ª´ JWT
  app.get('/auth/me', (Request req) {
    // Middleware ƒë√£ x·ª≠ l√Ω vi·ªác x√°c th·ª±c token
    // Ch√∫ng ta ch·ªâ c·∫ßn l·∫•y th√¥ng tin t·ª´ context
    final jwtPayload = req.context['jwt'] as Map<String, dynamic>;
    final userId = jwtPayload['userId'];
    final name = jwtPayload['name'];

    print('‚úÖ Checked auth status for user id: $userId');

    // Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ mu·ªën truy v·∫•n l·∫°i DB ƒë·ªÉ l·∫•y th√¥ng tin user m·ªõi nh·∫•t
    return jsonResponse(200, {
        'user': {'id': userId, 'name': name}
    });
  });


  final handler = Pipeline()
      .addMiddleware(logRequests())
      .addMiddleware(checkJwtMiddleware()) // Th√™m middleware JWT
      .addHandler(app);

  final server = await io.serve(handler, 'localhost', 8080);
  print('üöÄ Server running at http://${server.address.host}:${server.port}');
}
